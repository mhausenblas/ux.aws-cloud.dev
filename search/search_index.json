{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a site dedicated to tips & tricks for improving the usability and UX of AWS services. We focus here especially on the APIs , SDKs , and CLIs , and less on the console (GUI), covering this in two categories: Resources : providing links to articles, videos, books, etc. on a service-level basis. Recipes : providing recipes (tasks) using a simple \"Problem\"/\"Solutions\" structure.","title":"Home"},{"location":"contributing/","text":"Contributions are more then welcome! Please raise an issue and then we discuss how to best address your suggestions. Usually, this yields a PR.","title":"Contributing"},{"location":"recipes/","text":"The recipes presented here are using a simple \"Problem\"/\"Solutions\" structure. This means we first describe a concrete problem or user task at hand. Then we discuss and show potential solutions. These recipes are usually hands-on and may contain pros and cons of solutions or explict recommendations for one over the other.","title":"Overview"},{"location":"recipes/_template/","text":"Title \u00b6 Problem \u00b6 Solutions \u00b6 Further reading \u00b6 Conclusion \u00b6","title":"Title"},{"location":"recipes/_template/#title","text":"","title":"Title"},{"location":"recipes/_template/#problem","text":"","title":"Problem"},{"location":"recipes/_template/#solutions","text":"","title":"Solutions"},{"location":"recipes/_template/#further-reading","text":"","title":"Further reading"},{"location":"recipes/_template/#conclusion","text":"","title":"Conclusion"},{"location":"recipes/cross-account-ops/","text":"Cross-account operations \u00b6 Problem \u00b6 We recommend, in general, that you use multiple accounts. This is on the one hand for dealing with per-account limits, also known as Service Quotas , and on the other hand it helps with strengthening the security posture . The question is now how and where are cross-account operations supported? Solutions \u00b6 Cross-account operations apply in principle to all services. This doesn't mean that all services support it out of the box. It usually boils down to mastering IAM (esp. resource-based policies) and what a specific AWS service provides in terms of API support. From a theoretical point of view you first want to understand what resource-based policies are and how they differ from IAM roles : Cross-account access with a resource-based policy has some advantages over cross-account access with a role. With a resource that is accessed through a resource-based policy, the principal still works in the trusted account and does not have to give up his or her permissions to receive the role permissions. In other words, the principal continues to have access to resources in the trusted account at the same time as he or she has access to the resource in the trusting account. So, resource-based policies are attached to a resource while identity-based policies are attached to an IAM user, group, or role, with the principal ( who is allowed to do something) implicitly set by the entity the policy is attached to. For a general introduction into the topic check out Becky Weiss' excellent re:Invent 2019 talk on permissions across accounts . Finally, do some hands-on with the tutorial on delegating access across AWS accounts using IAM Roles and check out how to enable cross-account access to the console . Let's have a look at some service-specific recipes now. Compute (covering EC2, container services like ECS/EKS/ECR, as well as Lambda): Enabling cross-account access to Amazon EKS cluster resources Improve Operational Efficiency with Cross-Account AWS IAM Roles in ECS Containers Allow secondary account to push to/pull from ECR repository Cross account access for Lambda functions Managing Cross-Account Serverless Microservices Networking-related: VPC sharing: A new approach to multiple accounts and VPC management Using VPC Sharing for a Cost-Effective Multi-Account Microservice Architecture Data and storage topics: How can I provide cross-account access to objects that are in S3 buckets? How can I grant my EC2 instance access to an S3 bucket in another account? Cross-Account Access Control with Amazon STS for DynamoDB Further reading \u00b6 Posts on the AWS Security Blog: tagged with cross-account access tagged with Resource-based policies New AWS Resource Access Manager \u2013 Cross-Account Resource Sharing Securely Accessing Customer AWS Accounts with Cross-Account IAM Roles Conclusion \u00b6 Using multiple accounts, while recommended, can be challenging. Using available tools and managed services along with applying good practices makes it a possible to strengthening your defense-in-depth and also overcome account limits.","title":"Cross-account operations"},{"location":"recipes/cross-account-ops/#cross-account-operations","text":"","title":"Cross-account operations"},{"location":"recipes/cross-account-ops/#problem","text":"We recommend, in general, that you use multiple accounts. This is on the one hand for dealing with per-account limits, also known as Service Quotas , and on the other hand it helps with strengthening the security posture . The question is now how and where are cross-account operations supported?","title":"Problem"},{"location":"recipes/cross-account-ops/#solutions","text":"Cross-account operations apply in principle to all services. This doesn't mean that all services support it out of the box. It usually boils down to mastering IAM (esp. resource-based policies) and what a specific AWS service provides in terms of API support. From a theoretical point of view you first want to understand what resource-based policies are and how they differ from IAM roles : Cross-account access with a resource-based policy has some advantages over cross-account access with a role. With a resource that is accessed through a resource-based policy, the principal still works in the trusted account and does not have to give up his or her permissions to receive the role permissions. In other words, the principal continues to have access to resources in the trusted account at the same time as he or she has access to the resource in the trusting account. So, resource-based policies are attached to a resource while identity-based policies are attached to an IAM user, group, or role, with the principal ( who is allowed to do something) implicitly set by the entity the policy is attached to. For a general introduction into the topic check out Becky Weiss' excellent re:Invent 2019 talk on permissions across accounts . Finally, do some hands-on with the tutorial on delegating access across AWS accounts using IAM Roles and check out how to enable cross-account access to the console . Let's have a look at some service-specific recipes now. Compute (covering EC2, container services like ECS/EKS/ECR, as well as Lambda): Enabling cross-account access to Amazon EKS cluster resources Improve Operational Efficiency with Cross-Account AWS IAM Roles in ECS Containers Allow secondary account to push to/pull from ECR repository Cross account access for Lambda functions Managing Cross-Account Serverless Microservices Networking-related: VPC sharing: A new approach to multiple accounts and VPC management Using VPC Sharing for a Cost-Effective Multi-Account Microservice Architecture Data and storage topics: How can I provide cross-account access to objects that are in S3 buckets? How can I grant my EC2 instance access to an S3 bucket in another account? Cross-Account Access Control with Amazon STS for DynamoDB","title":"Solutions"},{"location":"recipes/cross-account-ops/#further-reading","text":"Posts on the AWS Security Blog: tagged with cross-account access tagged with Resource-based policies New AWS Resource Access Manager \u2013 Cross-Account Resource Sharing Securely Accessing Customer AWS Accounts with Cross-Account IAM Roles","title":"Further reading"},{"location":"recipes/cross-account-ops/#conclusion","text":"Using multiple accounts, while recommended, can be challenging. Using available tools and managed services along with applying good practices makes it a possible to strengthening your defense-in-depth and also overcome account limits.","title":"Conclusion"},{"location":"recipes/tag-it-up/","text":"Tag it up! \u00b6 Problem \u00b6 I get it, tagging stuff without a clear benefit is something few folks are willing to do. While AWS introduced Resource Groups and the Tag Editor in 2014 , oftentimes tags are not first-class citizens. While there are good practices for tagging available, it seems that the very act of tagging still is something lots of folks loath. Maybe the benefits of tagging, for example concerning cost control or to simplify access control are not obvious, or maybe it's just too cumbersome? Let's start with a quick review of the tagging mechanics. To tag the S3 bucket example with owner=me you'd use the following command: 1 2 3 aws s3api put-bucket-tagging \\ --bucket example \\ --tagging 'TagSet=[{owner=me}]' To tag the Lambda function example with owner=me you'd use the following command: 1 2 3 aws lambda tag-resource \\ --resource arn:aws:lambda:us-west-1:123456789012:function:example \\ --tags \"owner=me\" To tag the ELB example with owner=me you'd use the following command: 1 2 3 aws elb add-tags \\ --load-balancer-name example \\ --tags \"Key=owner,Value=me\" We see a pattern here and that is consistency . Or, better say, the lack thereof? Now, if you've been using AWS consoles you might not be overly surprised to find that, but fact is that the inconsistencies are also present in the APIs and by extension the SDKs. One can argue that this is Conway in action, however, there's no need for users to suffer from it. Solutions \u00b6 For example, using a tool like awsometag allows you to tag AWS resources in a uniform manner. Let's see it in action (using above examples): 1 2 3 4 5 6 awsometag arn : aws : s3 : us - west - 2 :: example owner = me awsometag arn : aws : lambda : us - west - 1 : 123456789102 : function : example owner = me awsometag arn : aws : elasticloadbalancing : eu - west - 1 : 123456789102 : loadbalancer / example \\ owner = me Based on tags you can use the resource group service to deal with all the resources tagged in the previous step: Further reading \u00b6 Tagging Best Practices Automatically Enforcing AWS Resource Tagging Policies AWS Naming & Tagging Conventions Tagger- AWS tagging tool Conclusion \u00b6 Tagging doesn't have to be awkward or complicated. And while we likely won't be able to change (or: fix?) the APIs top-down we can create and/or use tooling such as awsometag to make working with said APIs less painful.","title":"Tag it up!"},{"location":"recipes/tag-it-up/#tag-it-up","text":"","title":"Tag it up!"},{"location":"recipes/tag-it-up/#problem","text":"I get it, tagging stuff without a clear benefit is something few folks are willing to do. While AWS introduced Resource Groups and the Tag Editor in 2014 , oftentimes tags are not first-class citizens. While there are good practices for tagging available, it seems that the very act of tagging still is something lots of folks loath. Maybe the benefits of tagging, for example concerning cost control or to simplify access control are not obvious, or maybe it's just too cumbersome? Let's start with a quick review of the tagging mechanics. To tag the S3 bucket example with owner=me you'd use the following command: 1 2 3 aws s3api put-bucket-tagging \\ --bucket example \\ --tagging 'TagSet=[{owner=me}]' To tag the Lambda function example with owner=me you'd use the following command: 1 2 3 aws lambda tag-resource \\ --resource arn:aws:lambda:us-west-1:123456789012:function:example \\ --tags \"owner=me\" To tag the ELB example with owner=me you'd use the following command: 1 2 3 aws elb add-tags \\ --load-balancer-name example \\ --tags \"Key=owner,Value=me\" We see a pattern here and that is consistency . Or, better say, the lack thereof? Now, if you've been using AWS consoles you might not be overly surprised to find that, but fact is that the inconsistencies are also present in the APIs and by extension the SDKs. One can argue that this is Conway in action, however, there's no need for users to suffer from it.","title":"Problem"},{"location":"recipes/tag-it-up/#solutions","text":"For example, using a tool like awsometag allows you to tag AWS resources in a uniform manner. Let's see it in action (using above examples): 1 2 3 4 5 6 awsometag arn : aws : s3 : us - west - 2 :: example owner = me awsometag arn : aws : lambda : us - west - 1 : 123456789102 : function : example owner = me awsometag arn : aws : elasticloadbalancing : eu - west - 1 : 123456789102 : loadbalancer / example \\ owner = me Based on tags you can use the resource group service to deal with all the resources tagged in the previous step:","title":"Solutions"},{"location":"recipes/tag-it-up/#further-reading","text":"Tagging Best Practices Automatically Enforcing AWS Resource Tagging Policies AWS Naming & Tagging Conventions Tagger- AWS tagging tool","title":"Further reading"},{"location":"recipes/tag-it-up/#conclusion","text":"Tagging doesn't have to be awkward or complicated. And while we likely won't be able to change (or: fix?) the APIs top-down we can create and/or use tooling such as awsometag to make working with said APIs less painful.","title":"Conclusion"},{"location":"resources/","text":"[WIP] here comes general resources, both articles and tools.","title":"Overview"},{"location":"resources/containers/","text":"Amazon ECR Amazon ECS Amaon EKS AWS Fargate AWS Batch AWS Elastic Beanstalk Firecracker Bottlerocket","title":"Containers"},{"location":"resources/data/","text":"Amazon EBS Amazon EFS Amazon FSx Amazon Aurora Amazon DocumentDB Amazon ElastiCache Amazon RDS Amazon Redshift Amazon Athena Amazon Kinesis Amazon EMR","title":"Data"},{"location":"resources/fundamental/","text":"Amazon EC2 Amazon S3 Amazon DynamoDB Amazon SQS Amazon SNS","title":"Fundamental"},{"location":"resources/networking/","text":"Amazon API Gateway AWS App Mesh AWS Cloud Map Amazon CloudFront AWS Direct Connect Elastic Load Balancing Amazon Route 53 Amazon VPC AWS VPN","title":"Networking"},{"location":"resources/security/","text":"AWS Identity & Access Management (IAM) AmazonCognito Amazon Detective AWS Directory Service Amazon GuardDuty Amazon Inspector Amazon Macie AWS Resource Access Manager AWS Resource Groups AWS Secrets Manager AWS Security Hub AWS Shield AW Single Sign-On AWS WAF","title":"Security"}]}